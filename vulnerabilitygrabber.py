import shodan
import csv
import colorama
from colorama import Fore
import click
from tabulate import tabulate
import os
import sys
 
# Use to Clear Window
def clrscr():
 
    click.clear()
 
# Clear the Screen  
clrscr()
 
# Initialize the API Key and variables
SHODAN_API_KEY = ('u6RTMEeYG1hNlDgbB13oHcBJ7TAUq2aY')
api = shodan.Shodan(SHODAN_API_KEY)
 
headers = ['IP', 'CVE', 'CVSS', 'CVEs', 'High CVEs', 'Critical CVEs']
uniqueIPs = []
uniqueMachines = []
limits = 100
 
# Print the menu for the script
 
print(Fore.RED + 'Vulnerability Grabber for Shodan.')
print(Fore.RESET + 'Developed by sinatra')
print('')
print('Welcome to Vulnerability Grabber. Input an organisation name below to begin scanning.')
print('Examples: TDC A/S, Telenor A/S, STATENS IT etc.')
print('')
print('')
userInput = input('Enter organisation: ')
 
# Print results
try:
    results = api.search(f'org:{userInput} has_vuln:true', limit=limits)
    
    # Error handling with 0 results
    
    if results['total'] == 0:
        print(fore.RED + 'Total results found {}'.format(results['total']))
        print('')
        print('Your search gave 0 results. Either an error occured or your search didnt find anything.')
        print('')
 
        input(Fore.YELLOW + 'Press Enter to try another search query...')
        clrscr()
        os.execv(sys.executable, [sys.executable] + sys.argv)
    
    print(Fore.GREEN + 'Total results found {}'.format(results['total']))
    print(Fore.RESET + '')
    print('Would you like to:')
    print('1) View the data in the CLI')
    print('2) Print the data to a CSV file')
    print('3) Try another search query')
    
    option = int(input('Option: '))
    
    if option == 1:
    
        # Print the data to the CLI, beautifully with tables    
            
        for result in results['matches']:
                
            numberOfCVEs = 0
            numberOfHighCVEs = 0
            numberOfCriticalCVEs = 0
                
            nameCVE = []
            
            table = []
                
            for item in result['vulns']:
                
                numberOfCVEs = numberOfCVEs + 1
                cvssScore = float(result['vulns'][item]['cvss'])
                nameCVE.append(item)
                    
                # Check how critical the CVSS is
                    
                if (cvssScore >= 9.0):
                    
                    numberOfCriticalCVEs = numberOfCriticalCVEs + 1
                        
                elif (9.0 > cvssScore >= 7.0):
                    
                    numberOfHighCVEs = numberOfHighCVEs + 1
                        
                table.append([result['ip_str'], nameCVE, cvssScore, numberOfCVEs, numberOfHighCVEs, numberOfCriticalCVEs])
            
            print(tabulate(table, headers=headers, tablefmt='fancy_grid'))
            
            print('')
            print('Would you like to:')
            print('1) Print the data to a CSV file')
            print('2) Try another search query')
            option = int(input('Option: '))
            
            if option == 1:
            
                # Save the data to a CSV file
        
                with open('shodan-data.csv', 'w', encoding='UTF8', newline='') as f:
                    writer = csv.writer(f)
                    writer.writerow(headers)
                    
                    for result in results['matches']:
                        
                        numberOfCVEs = 0
                        numberOfHighCVEs = 0
                        numberOfCriticalCVEs = 0
                        
                        nameCVE = []
                        
                        for item in result['vulns']:
                        
                            numberOfCVEs = numberOfCVEs + 1
                            cvssScore = float(result['vulns'][item]['cvss'])
                            nameCVE.append(item)
                            
                            # Check how critical the CVSS is
                            
                            if (cvssScore >= 9.0):
                            
                                numberOfCriticalCVEs = numberOfCriticalCVEs + 1
                                
                            elif (9.0 > cvssScore >= 7.0):
                            
                                numberOfHighCVEs = numberOfHighCVEs + 1
                                
                        rows = [result['ip_str'], nameCVE, cvssScore, numberOfCVEs, numberOfHighCVEs, numberOfCriticalCVEs]
                        writer.writerow(rows)
                        
                        print('A CSV file has now been created.')
                        print('')
                        input(Fore.YELLOW + 'Press Enter to try another search query...')
                        clrscr()
                        os.execv(sys.executable, [sys.executable] + sys.argv)
 
            
            elif option == 2:
                print('')
                input(Fore.YELLOW + 'Press Enter to try another search query...')
                clrscr()
                os.execv(sys.executable, [sys.executable] + sys.argv)           
            
    elif option == 2:
    
        # Save the data to a CSV file
        
        with open('shodan-data.csv', 'w', encoding='UTF8', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(headers)
            
            for result in results['matches']:
                
                numberOfCVEs = 0
                numberOfHighCVEs = 0
                numberOfCriticalCVEs = 0
                
                nameCVE = []
                
                for item in result['vulns']:
                
                    numberOfCVEs = numberOfCVEs + 1
                    cvssScore = float(result['vulns'][item]['cvss'])
                    nameCVE.append(item)
                    
                    # Check how critical the CVSS is
                    
                    if (cvssScore >= 9.0):
                    
                        numberOfCriticalCVEs = numberOfCriticalCVEs + 1
                        
                    elif (9.0 > cvssScore >= 7.0):
                    
                        numberOfHighCVEs = numberOfHighCVEs + 1
                        
                rows = [result['ip_str'], nameCVE, cvssScore, numberOfCVEs, numberOfHighCVEs, numberOfCriticalCVEs]
                writer.writerow(rows)
                
                print('A CSV file has now been created.')
                print('')
                input(Fore.YELLOW + 'Press Enter to try another search query...')
                clrscr()
                os.execv(sys.executable, [sys.executable] + sys.argv)
                    
    elif option == 3:
    
        # Restart the script and clear the window
        
        clrscr()
        os.execv(sys.executable, [sys.executable] + sys.argv)
    
            
except (NameError, TypeError) as error:
    print(error)
